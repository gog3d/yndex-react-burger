{"ast":null,"code":"export const getForgotPasswordRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body.email) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'Reset email sent',\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'Reset email false'\n      });\n    }, 1500));\n  }\n};\nexport const getResetPasswordRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body.password) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'Password successfully reset',\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'Password reset false'\n      });\n    }, 1500));\n  }\n};\nexport const getRegisterRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body.password) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        user: {\n          email: body.email,\n          name: body.name\n        },\n        accessToken: 'Bearer ...',\n        refreshToken: 'token',\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'Register false'\n      });\n    }, 1500));\n  }\n};\nexport const getLoginRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body.password) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        accessToken: 'Bearer ...',\n        refreshToken: '',\n        user: {\n          email: body.email,\n          name: 'name'\n        },\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'Login false'\n      });\n    }, 1500));\n  }\n};\nexport const getLogoutRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'Successful logout',\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'logout false'\n      });\n    }, 1500));\n  }\n};\nexport const getTokenRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body.password) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        accessToken: 'Bearer ...,',\n        refreshToken: 'token',\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'refreshToken false'\n      });\n    }, 1500));\n  }\n};\nexport const getUserRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        user: {\n          email: 'email',\n          name: 'name'\n        },\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'user false'\n      });\n    }, 1500));\n  }\n};\nexport const getRefreshUserRequestApi = async function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (body.email) {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: true,\n        user: {\n          email: body.email,\n          name: body.name\n        },\n        reqBody: body\n      });\n    }, 1500));\n  } else {\n    return await new Promise(resolve => setTimeout(() => {\n      resolve({\n        success: false,\n        message: 'refreshUser false'\n      });\n    }, 1500));\n  }\n};","map":{"version":3,"names":["getForgotPasswordRequestApi","body","email","Promise","resolve","setTimeout","success","message","reqBody","getResetPasswordRequestApi","password","getRegisterRequestApi","user","name","accessToken","refreshToken","getLoginRequestApi","getLogoutRequestApi","getTokenRequestApi","getUserRequestApi","getRefreshUserRequestApi"],"sources":["/home/gog3d/JS/6-yndex-react/0-project/react-burger/src/redux/fakeApiAuth.js"],"sourcesContent":["export const getForgotPasswordRequestApi = async (body = null) => {\n  if(body.email){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          message: 'Reset email sent',\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'Reset email false',\n        });\n      }, 1500)\n    );\n  }\n\n};\nexport const getResetPasswordRequestApi = async (body = null) => {\n  if(body.password){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          message: 'Password successfully reset',\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'Password reset false',\n        });\n      }, 1500)\n    );\n  }\n};\n\nexport const getRegisterRequestApi = async (body = null) => {\n  if(body.password){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          user: {\n            email: body.email,\n            name: body.name\n          },\n          accessToken: 'Bearer ...',\n          refreshToken: 'token',\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'Register false',\n        });\n      }, 1500)\n    );\n  }\n};\n\nexport const getLoginRequestApi = async (body = null) => {\n  if(body.password){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          accessToken: 'Bearer ...',\n          refreshToken: '',\n          user: {\n            email: body.email,\n            name: 'name',\n          },\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'Login false',\n        });\n      }, 1500)\n    );\n  }\n};\nexport const getLogoutRequestApi = async (body = null) => {\n  if(body){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          message:'Successful logout',\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'logout false',\n        });\n      }, 1500)\n    );\n  }\n}\nexport const getTokenRequestApi = async (body = null) => {\n  if(body.password){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          accessToken: 'Bearer ...,',\n          refreshToken: 'token',\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'refreshToken false',\n        });\n      }, 1500)\n    );\n  }\n}\n\nexport const getUserRequestApi = async (body = null) => {\n  if(body){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          user: {\n            email: 'email',\n            name: 'name',\n          },\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'user false',\n        });\n      }, 1500)\n    );\n  }\n}\n\nexport const getRefreshUserRequestApi = async (body = null) => {\n  if(body.email){\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: true,\n          user: {\n            email: body.email,\n            name: body.name,\n          },\n          reqBody: body,\n        });\n      }, 1500)\n    );\n  } else {\n    return await new Promise(resolve =>\n      setTimeout(() => {\n        resolve({\n          success: false,\n          message: 'refreshUser false',\n        });\n      }, 1500)\n    );\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}