{"ast":null,"code":"var _jsxFileName = \"/home/gog3d/JS/6-yndex-react/0-project/react-burger/src/components/protected-route.tsx\",\n    _s = $RefreshSig$();\n\nimport { Redirect, Route } from 'react-router-dom';\nimport React from 'react';\nimport { useAppSelector } from '../redux/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProtectedRoute = props => {\n  _s();\n\n  //  const { children, rest } = props;\n  const {\n    authFailed\n  } = useAppSelector(store => store.auth); //const location = useLocation();\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: _ref => {\n      let {\n        location\n      } = _ref;\n      return authFailed ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/login',\n          state: {\n            from: location\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }, this) : children;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProtectedRoute, \"BjpagVshWX7o3W3lvZxERALsRb8=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Redirect","Route","React","useAppSelector","ProtectedRoute","props","authFailed","store","auth","rest","location","pathname","state","from","children"],"sources":["/home/gog3d/JS/6-yndex-react/0-project/react-burger/src/components/protected-route.tsx"],"sourcesContent":["import { Redirect, Route, RouterProps } from 'react-router-dom';\nimport React from 'react';\nimport {\n  useLocation,\n} from \"react-router-dom\";\nimport { useAppSelector } from '../redux/hooks';\n\nexport type ProtectedRouteProps = {\n  isAuthenticated: boolean;\n  authenticationPath: string;\n} & RouteProps;\n\nconst ProtectedRoute = (props: ProtectedRouteProps) => {\n//  const { children, rest } = props;\n  const {\n    authFailed,\n  } = useAppSelector((store) => store.auth);\n  \n  //const location = useLocation();\n\n  return (\n    <Route {...rest} render={\n      ({ location }) =>\n        authFailed ? (\n              <Redirect to={{\n                pathname: '/login',\n                state: { from: location }\n              }}/>\n        ) : (\n              children\n            )\n      }\n    />\n  );\n\n}\n\nexport default ProtectedRoute;"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,SAASC,cAAT,QAA+B,gBAA/B;;;AAOA,MAAMC,cAAc,GAAIC,KAAD,IAAgC;EAAA;;EACvD;EACE,MAAM;IACJC;EADI,IAEFH,cAAc,CAAEI,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAFlB,CAFqD,CAMrD;;EAEA,oBACE,QAAC,KAAD,OAAWC,IAAX;IAAiB,MAAM,EACrB;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OACEJ,UAAU,gBACJ,QAAC,QAAD;QAAU,EAAE,EAAE;UACZK,QAAQ,EAAE,QADE;UAEZC,KAAK,EAAE;YAAEC,IAAI,EAAEH;UAAR;QAFK;MAAd;QAAA;QAAA;QAAA;MAAA,QADI,GAMJI,QAPR;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAvBD;;GAAMV,c;UAIAD,c;;;KAJAC,c;AAyBN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}