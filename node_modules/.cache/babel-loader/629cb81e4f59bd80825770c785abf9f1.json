{"ast":null,"code":"import { createAction } from \"@reduxjs/toolkit\"; //import { baseURL }  from '../../utils/config';\n\nimport { checkResponse } from '../utils';\nimport { setCookie, getCookie, deleteCookie, fetchRequest } from '../utils';\nimport { GET_LOGIN_REQUEST, GET_LOGIN_SUCCESS, GET_LOGIN_FAILED, GET_REGISTER_REQUEST, GET_REGISTER_SUCCESS, GET_REGISTER_FAILED, GET_LOGOUT_REQUEST, GET_LOGOUT_SUCCESS, GET_LOGOUT_FAILED, GET_USER_REQUEST, GET_USER_SUCCESS, GET_USER_FAILED, GET_REFRESH_USER_REQUEST, GET_REFRESH_USER_SUCCESS, GET_REFRESH_USER_FAILED, GET_AUTH_REQUEST, GET_AUTH_SUCCESS, GET_AUTH_FAILED, GET_TOKEN_REQUEST, GET_TOKEN_SUCCESS, GET_TOKEN_FAILED } from '../action-types';\nexport const getLoginRequest = createAction(GET_LOGIN_REQUEST);\nexport const getLoginSuccess = createAction(GET_LOGIN_SUCCESS);\nexport const getLoginFailed = createAction(GET_LOGIN_FAILED);\nexport const getRegisterRequest = createAction(GET_REGISTER_REQUEST);\nexport const getRegisterSuccess = createAction(GET_REGISTER_SUCCESS);\nexport const getRegisterFailed = createAction(GET_REGISTER_FAILED);\nexport const getLogoutRequest = createAction(GET_LOGOUT_REQUEST);\nexport const getLogoutSuccess = createAction(GET_LOGOUT_SUCCESS);\nexport const getLogoutFailed = createAction(GET_LOGOUT_FAILED);\nexport const getUserRequest = createAction(GET_USER_REQUEST);\nexport const getUserSuccess = createAction(GET_USER_SUCCESS);\nexport const getUserFailed = createAction(GET_USER_FAILED);\nexport const getRefreshUserRequest = createAction(GET_REFRESH_USER_REQUEST);\nexport const getRefreshUserSuccess = createAction(GET_REFRESH_USER_SUCCESS);\nexport const getRefreshUserFailed = createAction(GET_REFRESH_USER_FAILED);\nexport const getAuthRequest = createAction(GET_AUTH_REQUEST);\nexport const getAuthSuccess = createAction(GET_AUTH_SUCCESS);\nexport const getAuthFailed = createAction(GET_AUTH_FAILED);\nexport const getTokenRequest = createAction(GET_TOKEN_REQUEST);\nexport const getTokenSuccess = createAction(GET_TOKEN_SUCCESS);\nexport const getTokenFailed = createAction(GET_TOKEN_FAILED);\nexport const getLogin = body => async dispatch => {\n  dispatch({\n    type: getLoginRequest\n  });\n\n  try {\n    const res = await fetchRequest.post('auth/login', body);\n    const obj = await checkResponse(res); //const obj = await getLoginRequestApi(body);\n    //console.log(obj)\n\n    if (obj) {\n      dispatch({\n        type: getLoginSuccess,\n        login: obj\n      });\n      dispatch({\n        type: getUserSuccess,\n        user: obj\n      });\n      dispatch({\n        type: getAuthSuccess,\n        auth: obj\n      });\n      const accessToken = obj.accessToken.split('Bearer ')[1];\n      const refreshToken = obj.refreshToken;\n\n      if (refreshToken) {\n        setCookie('refreshToken', refreshToken);\n      }\n\n      if (accessToken) {\n        setCookie('accessToken', accessToken);\n      }\n    } else {\n      dispatch({\n        type: getLoginFailed\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: getLoginFailed\n    });\n  }\n\n  ;\n};\nexport const getAuth = () => async dispatch => {\n  dispatch({\n    type: getAuthRequest\n  });\n  const refreshToken = getCookie('refreshToken');\n\n  if (refreshToken) {\n    try {\n      const res = await fetchRequest.post('auth/token', {\n        'token': refreshToken\n      });\n      const obj = await checkResponse(res); //const obj = await getLoginRequestApi(body);\n\n      if (obj) {\n        dispatch({\n          type: getAuthSuccess,\n          auth: obj\n        });\n        const accessToken = obj.accessToken.split('Bearer ')[1];\n        const refreshToken = obj.refreshToken;\n\n        if (refreshToken) {\n          setCookie('refreshToken', refreshToken);\n        }\n\n        if (accessToken) {\n          setCookie('accessToken', accessToken);\n        }\n      } else {\n        dispatch({\n          type: getAuthFailed\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: getAuthFailed\n      });\n    }\n  } else {\n    dispatch({\n      type: getAuthFailed\n    });\n  }\n};\nexport const getUser = () => async dispatch => {\n  dispatch({\n    type: getUserRequest\n  });\n  await getAuth();\n  const accessToken = getCookie('accessToken');\n\n  if (accessToken) {\n    try {\n      const res = await fetchRequest.get('auth/user', {\n        'Authorization': 'Token ' + accessToken\n      });\n      const obj = await checkResponse(res); // const obj = await getLoginRequestApi({});\n\n      if (obj) {\n        dispatch({\n          type: getUserSuccess,\n          user: obj\n        });\n      } else {\n        dispatch({\n          type: getUserFailed\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: getUserFailed\n      });\n    }\n  } else {\n    dispatch({\n      type: getUserFailed\n    });\n  }\n};\nexport const getRegister = body => async dispatch => {\n  dispatch({\n    type: getRegisterRequest\n  });\n\n  try {\n    const res = await fetchRequest.post('auth/register', body);\n    const obj = await checkResponse(res);\n\n    if (obj) {\n      dispatch({\n        type: getRegisterSuccess,\n        register: obj\n      });\n      const accessToken = obj.accessToken.split('Bearer ')[1];\n      const refreshToken = obj.refreshToken;\n\n      if (refreshToken) {\n        setCookie('refreshToken', refreshToken);\n      }\n\n      if (accessToken) {\n        setCookie('accessToken', accessToken);\n      }\n    } else {\n      dispatch({\n        type: getRegisterFailed\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: getRegisterFailed\n    });\n  }\n\n  ;\n};\nexport const getLogout = () => async dispatch => {\n  dispatch({\n    type: getLogoutRequest\n  });\n  const refreshToken = getCookie('refreshToken');\n\n  if (refreshToken) {\n    try {\n      const res = await fetchRequest.post('auth/logout', {\n        'token': refreshToken\n      });\n      const obj = await checkResponse(res); //const obj = await getLogoutRequestApi();\n\n      if (obj) {\n        dispatch({\n          type: getLogoutSuccess,\n          logout: obj\n        });\n        dispatch({\n          type: getUserSuccess,\n          user: {}\n        });\n        dispatch({\n          type: getUserFailed\n        });\n        dispatch({\n          type: getAuthSuccess,\n          auth: {}\n        });\n        dispatch({\n          type: getAuthFailed\n        });\n        const accessToken = getCookie('accessToken');\n        const refreshToken = getCookie('refreshToken');\n\n        if (refreshToken) {\n          deleteCookie('refreshToken');\n        }\n\n        if (accessToken) {\n          deleteCookie('accessToken');\n        }\n      } else {\n        dispatch({\n          type: getLogoutFailed\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: getLogoutFailed\n      });\n    }\n\n    ;\n  } else {\n    dispatch({\n      type: getLogoutFailed\n    });\n  }\n};\nexport const getRefreshUser = function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return async dispatch => {\n    dispatch({\n      type: getRefreshUserRequest\n    });\n    const accessToken = getCookie('accessToken');\n\n    if (accessToken) {\n      try {\n        const obj = undefined;\n\n        if (body !== null) {\n          const res = await fetchRequest.patch('auth/user', body, {\n            'Authorization': 'Token ' + accessToken\n          });\n          const obj = await checkResponse(res);\n        }\n\n        if (obj) {\n          dispatch({\n            type: getRefreshUserSuccess,\n            refreshUser: obj\n          });\n          dispatch({\n            type: getUserSuccess,\n            user: obj\n          });\n        } else {\n          dispatch({\n            type: getRefreshUserFailed\n          });\n        }\n      } catch (error) {\n        console.log(error);\n        dispatch({\n          type: getRefreshUserFailed\n        });\n      }\n    } else {\n      dispatch({\n        type: getRefreshUserFailed\n      });\n    }\n  };\n};","map":{"version":3,"names":["createAction","checkResponse","setCookie","getCookie","deleteCookie","fetchRequest","GET_LOGIN_REQUEST","GET_LOGIN_SUCCESS","GET_LOGIN_FAILED","GET_REGISTER_REQUEST","GET_REGISTER_SUCCESS","GET_REGISTER_FAILED","GET_LOGOUT_REQUEST","GET_LOGOUT_SUCCESS","GET_LOGOUT_FAILED","GET_USER_REQUEST","GET_USER_SUCCESS","GET_USER_FAILED","GET_REFRESH_USER_REQUEST","GET_REFRESH_USER_SUCCESS","GET_REFRESH_USER_FAILED","GET_AUTH_REQUEST","GET_AUTH_SUCCESS","GET_AUTH_FAILED","GET_TOKEN_REQUEST","GET_TOKEN_SUCCESS","GET_TOKEN_FAILED","getLoginRequest","getLoginSuccess","getLoginFailed","getRegisterRequest","getRegisterSuccess","getRegisterFailed","getLogoutRequest","getLogoutSuccess","getLogoutFailed","getUserRequest","getUserSuccess","getUserFailed","getRefreshUserRequest","getRefreshUserSuccess","getRefreshUserFailed","getAuthRequest","getAuthSuccess","getAuthFailed","getTokenRequest","getTokenSuccess","getTokenFailed","getLogin","body","dispatch","type","res","post","obj","login","user","auth","accessToken","split","refreshToken","error","console","log","getAuth","getUser","get","getRegister","register","getLogout","logout","getRefreshUser","undefined","patch","refreshUser"],"sources":["/home/gog3d/JS/6-yndex-react/0-project/react-burger/src/redux/actions/auth.ts"],"sourcesContent":["import { AppDispatch, AppThunk } from '../store';\nimport { createAction } from \"@reduxjs/toolkit\";\n//import { baseURL }  from '../../utils/config';\nimport { getLoginRequestApi } from './fakeApiAuth';\nimport { checkResponse }  from '../utils';\nimport { TRefreshUser } from '../../types/data';\nimport { setCookie, getCookie, deleteCookie, fetchRequest } from '../utils';\n\nimport {\n  GET_LOGIN_REQUEST,\n  GET_LOGIN_SUCCESS,\n  GET_LOGIN_FAILED,\n  \n  GET_REGISTER_REQUEST,\n  GET_REGISTER_SUCCESS,\n  GET_REGISTER_FAILED,\n  \n  GET_LOGOUT_REQUEST,\n  GET_LOGOUT_SUCCESS,\n  GET_LOGOUT_FAILED,\n   \n  GET_USER_REQUEST,\n  GET_USER_SUCCESS,\n  GET_USER_FAILED,\n  \n  GET_REFRESH_USER_REQUEST,\n  GET_REFRESH_USER_SUCCESS,\n  GET_REFRESH_USER_FAILED,\n  \n  GET_AUTH_REQUEST,\n  GET_AUTH_SUCCESS,\n  GET_AUTH_FAILED,\n\n  GET_TOKEN_REQUEST,\n  GET_TOKEN_SUCCESS,\n  GET_TOKEN_FAILED,\n\n} from '../action-types';\n\nexport const getLoginRequest = createAction(GET_LOGIN_REQUEST);\nexport const getLoginSuccess = createAction(GET_LOGIN_SUCCESS);\nexport const getLoginFailed = createAction(GET_LOGIN_FAILED);\n\nexport const getRegisterRequest = createAction(GET_REGISTER_REQUEST);\nexport const getRegisterSuccess = createAction(GET_REGISTER_SUCCESS);\nexport const getRegisterFailed = createAction(GET_REGISTER_FAILED);\n\nexport const getLogoutRequest = createAction(GET_LOGOUT_REQUEST);\nexport const getLogoutSuccess = createAction(GET_LOGOUT_SUCCESS);\nexport const getLogoutFailed = createAction(GET_LOGOUT_FAILED);\n \nexport const getUserRequest = createAction(GET_USER_REQUEST);\nexport const getUserSuccess = createAction(GET_USER_SUCCESS);\nexport const getUserFailed = createAction(GET_USER_FAILED);\n\nexport const getRefreshUserRequest = createAction(GET_REFRESH_USER_REQUEST);\nexport const getRefreshUserSuccess = createAction(GET_REFRESH_USER_SUCCESS);\nexport const getRefreshUserFailed = createAction(GET_REFRESH_USER_FAILED);\n\nexport const getAuthRequest = createAction(GET_AUTH_REQUEST);\nexport const getAuthSuccess = createAction(GET_AUTH_SUCCESS);\nexport const getAuthFailed = createAction(GET_AUTH_FAILED);\n\nexport const getTokenRequest = createAction(GET_TOKEN_REQUEST);\nexport const getTokenSuccess = createAction(GET_TOKEN_SUCCESS);\nexport const getTokenFailed = createAction(GET_TOKEN_FAILED);\n\nexport type TAuthAction = ReturnType<typeof getLoginRequest>\n                          | ReturnType<typeof getLoginSuccess>\n                          | ReturnType<typeof getLoginFailed>\n                          | ReturnType<typeof getRegisterRequest>\n                          | ReturnType<typeof getRegisterSuccess>\n                          | ReturnType<typeof getRegisterFailed>\n                          | ReturnType<typeof getLogoutRequest>\n                          | ReturnType<typeof getLogoutSuccess>\n                          | ReturnType<typeof getLogoutFailed>\n                          | ReturnType<typeof getUserRequest>\n                          | ReturnType<typeof getUserSuccess>\n                          | ReturnType<typeof getUserFailed>\n                          | ReturnType<typeof getRefreshUserRequest>\n                          | ReturnType<typeof getRefreshUserSuccess>\n                          | ReturnType<typeof getRefreshUserFailed>\n                          | ReturnType<typeof getAuthRequest>\n                          | ReturnType<typeof getAuthSuccess>\n                          | ReturnType<typeof getAuthFailed>\n                          | ReturnType<typeof getTokenRequest>\n                          | ReturnType<typeof getTokenSuccess>\n                          | ReturnType<typeof getTokenFailed>;\n                          \nexport type TLoginPostBody = {\n  email:string,\n  password: string\n}\nexport type TAuthPostBody = {\n  token: string\n}\n\nexport const getLogin = (body: TLoginPostBody) => async (dispatch: AppDispatch) => {\n  dispatch({ type: getLoginRequest });\n  try {\n    const res = await fetchRequest.post('auth/login', body);\n    const obj = await checkResponse(res);\n    //const obj = await getLoginRequestApi(body);\n    //console.log(obj)\n      if (obj) {\n        dispatch({ type: getLoginSuccess, login: obj});\n        dispatch({ type: getUserSuccess, user: obj});\n        dispatch({ type: getAuthSuccess, auth: obj});\n        const  accessToken = obj.accessToken.split('Bearer ')[1];\n        const  refreshToken = obj.refreshToken;\n        if (refreshToken) {\n          setCookie('refreshToken', refreshToken);\n        }\n        if (accessToken) {\n          setCookie('accessToken', accessToken);\n        }\n      } else {\n        dispatch({ type: getLoginFailed });\n      }\n  } catch(error) {\n    console.log(error);\n    dispatch({ type: getLoginFailed });\n  };\n};\n\nexport const getAuth = () => async (dispatch: AppDispatch) => {\n  dispatch({ type: getAuthRequest });\n  const refreshToken = getCookie('refreshToken');\n  if (refreshToken) {\n    try {\n      const res = await fetchRequest.post('auth/token', { 'token' : refreshToken });\n      const obj = await checkResponse(res);\n      //const obj = await getLoginRequestApi(body);\n        if (obj) {\n          dispatch({ type: getAuthSuccess, auth: obj});\n          const  accessToken = obj.accessToken.split('Bearer ')[1];\n          const  refreshToken = obj.refreshToken;\n          if (refreshToken) {\n            setCookie('refreshToken', refreshToken);\n          }\n          if (accessToken) {\n            setCookie('accessToken', accessToken);\n          }\n        } else {\n          dispatch({ type: getAuthFailed });\n        }\n    } catch(error) {\n      console.log(error);\n      dispatch({ type: getAuthFailed });\n    }\n  } else {\n    dispatch({ type: getAuthFailed });\n  }\n};\n\nexport const getUser =  () => async (dispatch: AppDispatch) => {\n  dispatch({ type: getUserRequest });\n  await getAuth();\n  const accessToken = getCookie('accessToken');\n  if(accessToken) {\n    try {\n      const res = await fetchRequest.get('auth/user', { 'Authorization': 'Token '+ accessToken });\n      const obj = await checkResponse(res);\n     // const obj = await getLoginRequestApi({});\n      if (obj) {\n        dispatch({ type: getUserSuccess, user: obj});\n      } else {\n        dispatch({ type: getUserFailed });\n      }\n    } catch(error){\n        console.log(error)\n        dispatch({ type: getUserFailed });\n    }\n  } else {\n    dispatch({ type: getUserFailed });\n  }\n};\n\nexport type TRegisterBody = { \n  email: string, \n  password: string, \n  name: string\n }\n\nexport const getRegister = (body: TRegisterBody) => async (dispatch: AppDispatch) => {\n  dispatch({ type: getRegisterRequest });\n  try {\n    const res = await fetchRequest.post('auth/register', body);\n    const obj = await checkResponse(res);\n      if (obj) {\n        dispatch({ type: getRegisterSuccess, register: obj});\n        const  accessToken = obj.accessToken.split('Bearer ')[1];\n        const  refreshToken = obj.refreshToken;\n        if (refreshToken) {\n          setCookie('refreshToken', refreshToken);\n        }\n        if (accessToken) {\n          setCookie('accessToken', accessToken);\n        }\n      } else {\n        dispatch({ type: getRegisterFailed });\n      }\n  } catch(error) {\n    console.log(error);\n    dispatch({ type: getRegisterFailed });\n  };\n};\n\nexport const getLogout = () => async (dispatch: AppDispatch) => {\n  dispatch({ type: getLogoutRequest });\n  const refreshToken = getCookie('refreshToken');\n  if (refreshToken) {\n    try {\n    const res = await fetchRequest.post('auth/logout', { 'token' : refreshToken });\n    const obj = await checkResponse(res);\n    //const obj = await getLogoutRequestApi();\n      if (obj) {\n        dispatch({ type: getLogoutSuccess, logout: obj});\n        dispatch({ type: getUserSuccess, user: {}});\n        dispatch({ type: getUserFailed });\n        dispatch({ type: getAuthSuccess, auth: {}});\n        dispatch({ type: getAuthFailed });\n        const  accessToken = getCookie('accessToken');\n        const  refreshToken = getCookie('refreshToken');\n        if (refreshToken) {\n          deleteCookie('refreshToken');\n        }\n        if (accessToken) {\n          deleteCookie('accessToken');\n        }\n      } else {\n        dispatch({ type: getLogoutFailed });\n      }\n  } catch(error) {\n    console.log(error);\n    dispatch({ type: getLogoutFailed });\n  };\n  } else {\n    dispatch({ type: getLogoutFailed });\n  \n  }\n};\n\nexport const getRefreshUser = (body: (TRefreshUser | null) = null) => async (dispatch: AppDispatch) => {\n  dispatch({ type: getRefreshUserRequest });\n  const accessToken = getCookie('accessToken');\n  if(accessToken) {\n    try {\n      const obj = undefined;  \n      if (body !== null) {\n        const res = await fetchRequest.patch('auth/user', body, \n          { 'Authorization': 'Token '+ accessToken });\n        const obj = await checkResponse(res);\n      }\n      if (obj) {\n        dispatch({ type: getRefreshUserSuccess, refreshUser: obj});\n        dispatch({ type: getUserSuccess, user: obj});\n      } else {\n        dispatch({ type: getRefreshUserFailed });\n      }\n    } catch(error){\n        console.log(error)\n        dispatch({ type: getRefreshUserFailed });\n    }\n  } else {\n    dispatch({ type: getRefreshUserFailed });\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}